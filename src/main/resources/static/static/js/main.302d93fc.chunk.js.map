{"version":3,"sources":["actions/ActionTypes.ts","actions/index.tsx","TitleInput.tsx","MainPageContainer.tsx","app/App.tsx","serviceWorker.ts","reducers/reducer.tsx","index.tsx"],"names":["ActionTypes","TitleInput","props","className","title","onChange","e","updateTitle","MainPageContainer","this","React","mapDispatchToProps","event","type","UPDATE_TITLE","connect","state","App","Boolean","window","location","hostname","match","initState","reducer","action","target","value","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAYA,E,0FAAAA,O,gCAAAA,M,KCEL,I,OCeQC,EAVqB,SAAAC,GAClC,OACE,6BACE,yBAAKC,UAAW,SAAhB,UAAiCD,EAAME,OACvC,2BAAOC,SAAU,SAACC,GAAD,OAAYJ,EAAMK,YAAYD,QCA/CE,E,iLAEF,OAAO,gBAAC,EAAD,CAAYJ,MAAOK,KAAKP,MAAME,MAAOG,YAAaE,KAAKP,MAAMK,kB,GAFxCG,aAU1BC,EAAqB,CACzBJ,YFpByB,SAACK,GAAD,MAAiB,CAC1CC,KAAMb,EAAYc,aAClBF,WEqBaG,cARS,SAACC,GAAD,MAAiB,CACvCZ,MAAOY,EAAMZ,QAOyBO,EAAzBI,CAA6CP,GCb7CS,EATO,WACpB,OACE,yBAAKd,UAAU,OAAf,wCAEE,kBAAC,EAAD,QCKce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+jBChBN,IAAMC,EAAY,CAChBnB,MAAO,IAYMoB,EATC,WAAqC,IAApCR,EAAmC,uDAA3BO,EAAWE,EAAgB,uCAClD,OAAIA,EAAOZ,OAASb,EAAYc,aACvB,EAAP,GAAWE,EAAX,CAAkBZ,MAAOqB,EAAOb,MAAMc,OAAOC,QAGtCX,G,OCHLY,EAAQC,YAAYL,GAE1BM,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEEI,SAASC,eAAe,SF2HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.302d93fc.chunk.js","sourcesContent":["export enum ActionTypes {\n  UPDATE_TITLE\n}","import { ActionTypes } from './ActionTypes';\n\nexport const updateTitle = (event: any) => ({\n  type: ActionTypes.UPDATE_TITLE,\n  event\n});","import React from 'react';\n\ninterface Props {\n  title: string;\n  updateTitle: (e: any) => void;\n}\n\nconst TitleInput: React.FC<Props> = props => {\n  return (\n    <div>\n      <div className={'title'}>title: {props.title}</div>\n      <input onChange={(e: any) => props.updateTitle(e)}/>\n    </div>\n  );\n};\n\n\nexport default TitleInput;","import * as React from 'react';\nimport { updateTitle } from './actions';\nimport { connect } from 'react-redux';\nimport TitleInput from './TitleInput';\n\ninterface Props {\n  title: string;\n  updateTitle: (e: any) => void;\n}\n\n\nclass MainPageContainer extends React.Component<Props> {\n  render() {\n    return <TitleInput title={this.props.title} updateTitle={this.props.updateTitle}/>\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  title: state.title\n});\n\nconst mapDispatchToProps = {\n  updateTitle: updateTitle\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainPageContainer);\n","import React from 'react';\nimport MainPageContainer from '../MainPageContainer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      A DGS-1 Pie webapp under construction\n      <MainPageContainer/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ActionTypes } from '../actions/ActionTypes';\n\nconst initState = {\n  title: \"\",\n};\n\nconst reducer = (state = initState, action: any) => {\n  if (action.type === ActionTypes.UPDATE_TITLE) {\n    return {...state, title: action.event.target.value}\n  }\n  else {\n    return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers/reducer';\nimport { createStore } from 'redux';\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}